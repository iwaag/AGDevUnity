using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using AGDev.StdAssets.Unity;
using System.Linq;

namespace AGDev.Unity {

	public class UnityBehaverRoot : UnityBehaver {
		public GrammarUnit attributeOnCreate;
		public RootMonoBBahaverFrontFactory parent;
		public ImmediatePicker<CustomizableUnityBehaver, GrammarBlock> savedUnityBehaver;
		public Picker<MonoBUnityBehaver, GrammarBlock> basicUnityBehaver;
		public CustomizableUnityBehaver customBehaverInstance;
		class BasicUBColl : CollectingListener<MonoBUnityBehaver> {
			public UnityBehaverRoot parent;
			public void Collect(MonoBUnityBehaver prefab) {
				parent.customBehaverInstance.baseBehaver = GameObject.Instantiate(prefab, parent.customBehaverInstance.transform);
			}

			public void OnFail(string reason) { }

			public void OnFinish() { }
		}
		public void OnFail(string reason) {}
		public void OnFinish() { }

		AttributeMatchResult AttributeMatcher.MatchAttribue(GrammarBlock attribute) {
			if(customBehaverInstance == null) {
				customBehaverInstance = savedUnityBehaver.PickBestElement(attribute);
				if (customBehaverInstance == null) {
					customBehaverInstance = GameObject.Instantiate(parent.bRootPrefab);
					customBehaverInstance.nameOnCreate = attributeOnCreate.word;
					var coll = new BasicUBColl { parent = this };
					basicUnityBehaver.PickBestElement(attribute, coll);
				}
			}
			return customBehaverInstance.behaver.MatchAttribue(attribute);
		}
		public class BridgeUnityBehaviorTrigger : BehaviorTrigger {
			public UnityBehaviorTrigger unityBTrigger;
			public UnityBehaviorDefinition behaviorDef;
			public void BeginBehaviorFromStart(BehaviorListener behaviorListener) {
				unityBTrigger.BeginBehaviorFromStart();
			}
			public class PrvtSupLis : BehaviorSupportListener {

			}
			public void ContinueBehavior() {}

			public void StopBehavior() {}
		}
		void BehaviorSetter.ReadyBehavior(BehaviorExpression bExpr, BehaviorRequestListener reqListener) {
			var listener = new LoggingBehaviorRequestListener { reqListener = reqListener };
			customBehaverInstance.ReadyBehavior(bExpr, listener);
		}

		void BehaviorChecker.ReadyCheckBehavior(BehaviorExpression bExpr, BehaviorCheckRequestListener chkReqListener) {
			var coll = new LoggingCollector<UnityBehaviorCheckTrigger> { client = chkReqListener };
			customBehaverInstance.ReadyCheckBehavior(bExpr, coll);
		}
		void UnityBehaviorSetter.ReadyBehavior(BehaviorExpression bExpr, Collector<UnityBehaviorTrigger> reqListener) {
			
		}

		void UnityBehaviorChecker.ReadyCheckBehavior(BehaviorExpression bExpr, Collector<UnityBehaviorCheckTrigger> chkReqListener) {
			
		}
	}
	[System.Serializable]
	public class UnityBehaviorDefinition {
		public string behaviorName;
		public TextAsset ERWC;
		public MonoBSpaceDistributer spaceDistributer;
	}
	public class NamedBehaviorBehaver : Behaver {
		public RootMonoBBahaverFrontFactory parent;
		public InterpreterPackage iptrPackage;
		public class NamedProcessTrigger : BehaviorTrigger {
			public BehaviorTrigger process;
			void BehaviorTrigger.BeginBehaviorFromStart(BehaviorListener behaviorListener) {
				process.BeginBehaviorFromStart(behaviorListener);
			}

			void BehaviorTrigger.ContinueBehavior() {
				throw new System.NotImplementedException();
			}

			void BehaviorTrigger.StopBehavior() {
				throw new System.NotImplementedException();
			}
		}
		public List<NamedProcessTrigger> triggers = new List<NamedProcessTrigger>();
		public AttributeMatchResult MatchAttribue(GrammarBlock attribute) {
			if (attribute.unit != null) {
				var def = behaviorDefs.PickBestElement(attribute.unit);
				if (def != null)
					return AttributeMatchResult.POSITIVE;
			}
			return AttributeMatchResult.NEGATIVE;
		}

		public void ReadyBehavior(BehaviorExpression gBLock, BehaviorRequestListener reqListener) {
			if (gBLock.subject.unit != null) {
				var def = behaviorDefs.PickBestElement(gBLock.subject.unit);
				if (def != null) {
					var trigger = iptrPackage.erWordsIptr.InterpretERWordsAsBehavior(def.ERWC);
					var newTrigger = new NamedProcessTrigger { process = trigger };
					triggers.Add(newTrigger);
					reqListener.OnSucceed(newTrigger);
				}
			}
		}

		public void ReadyCheckBehavior(BehaviorExpression gBLock, BehaviorCheckRequestListener chkReqListener) {
		}
	}
	[RequireComponent(typeof(StdMonoBBFrontInteractionRecorder))]
	public class RootMonoBBahaverFrontFactory : 
		MonoBBahaverFactory,
		ParameterizedFactory<Behaver, GrammarBlock>
	{
		public UnityBehaviorDefinition rootBehaviorDef;
		public List<UnityBehaviorDefinition> behaviorDefs;
		public Stack<UnityBehaviorDefinition> currentDefs;
		public NamedBehaviorBehaver namedBehaviorBehaver;
		public CustomizableUnityBehaver bRootPrefab;
		public override ParameterizedFactory<Behaver, GrammarBlock> behaverFactory { get { return this; } }
		void ParameterizedFactory<Behaver, GrammarBlock>.CreateObject(GrammarBlock param, CollectingListener<Behaver> collector) {
			if (namedBehaviorBehaver.MatchAttribue(param) == AttributeMatchResult.POSITIVE) {
				collector.Collect(namedBehaviorBehaver);
			} else {
				if (param.unit != null) {
					collector.Collect();
				}
			}
			
		}
		public StdBehaverFront GetStdBFront(GrammarBlock behaverAttribute) {
			foreach (var bFront in bFronts) {
				if ((bFront as AttributeMatcher).MatchAttribue(behaverAttribute) == AttributeMatchResult.POSITIVE) {
					return bFront;
				}
			}
			return null;
		}
	}
}